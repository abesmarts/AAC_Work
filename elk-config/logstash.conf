input {
  # Beats input for Filebeat
  beats {
    port => 5044
  }
  
  # TCP input for Python scripts direct connection
  tcp {
    port => 5000
    type => "python-direct"
    codec => json_lines
  }
  
  # UDP input for syslog
  udp {
    port => 5000
    type => "syslog"
  }
}

filter {
  # Parse Semaphore logs
  if [fields][log_type] == "semaphore" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:level}\] %{GREEDYDATA:log_message}" 
      }
    }
    mutate {
      add_tag => ["semaphore"]
    }
  }
  
  # Parse VM system logs
  if [fields][log_type] == "vm-system" {
    grok {
      match => { 
        "message" => "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:host} %{WORD:program}(?:\[%{POSINT:pid}\])?: %{GREEDYDATA:log_message}" 
      }
    }
    mutate {
      add_tag => ["vm-system"]
    }
  }
  
  # Parse Python script logs (already JSON)
  if [fields][log_type] == "python-scripts" or [type] == "python-direct" {
    if [message] {
      # Parse JSON message if it's a string
      json {
        source => "message"
        target => "parsed_data"
      }
      
      # Move parsed fields to root level
      ruby {
        code => "
          parsed = event.get('parsed_data')
          if parsed.is_a?(Hash)
            parsed.each { |k, v| event.set(k, v) }
            event.remove('parsed_data')
          end
        "
      }
    }
    
    # Add tags based on data type
    if [data_type] == "system_metrics" {
      mutate { add_tag => ["python-system-metrics"] }
    }
    if [data_type] == "process_metrics" {
      mutate { add_tag => ["python-process-metrics"] }
    }
    if [data_type] == "system_alert" {
      mutate { add_tag => ["python-system-alert"] }
    }
    if [data_type] == "heartbeat" {
      mutate { add_tag => ["python-heartbeat"] }
    }
    if [data_type] == "application_event" {
      mutate { add_tag => ["python-app-event"] }
    }
  }
  
  # Add VM metadata
  if [vm_name] {
    mutate {
      add_field => { "source_vm" => "%{vm_name}" }
    }
  }
  
  # Parse timestamp if present
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }
  
  # Clean up fields
  mutate {
    remove_field => ["agent", "ecs", "host", "input", "message"]
  }
}

output {
  # Output to Elasticsearch with different indices based on data type
  if "python-system-metrics" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "vm-system-metrics-%{+YYYY.MM.dd}"
    }
  }
  else if "python-system-alert" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "vm-system-alerts-%{+YYYY.MM.dd}"
    }
  }
  else if "python-heartbeat" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "vm-heartbeat-%{+YYYY.MM.dd}"
    }
  }
  else {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "vm-logs-%{+YYYY.MM.dd}"
    }
  }
  
  # Debug output (uncomment for troubleshooting)
  # stdout { 
  #   codec => rubydebug 
  # }
}
